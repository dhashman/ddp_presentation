gho3$Age.Group <- factor(gho3$Age.Group, levels=ages)
gho3
gho3 <- arrange(gho3, Age.Group)
gho3
str(gho3)
gho3$Age.Group
gho3$Age.Group[1]
length(gho3$Age.Group)
levels(gho3$Age.Group)
strsplit(gho3$Age.Group, "-")
strsplit(as.character(gho3$Age.Group, "-"))
strsplit(as.character(gho3$Age.Group), "-")
?substr
?repl
?replace
?index
?repl
x <- strsplit(as.character(gho3$Age.Group), "-")
x
x[1]
x[2]
strsplit(x[1], "<")
str(x)
x[1] <- c("0", "0")
x
x[1]
x
x[1][1]
x[1][2] <- "0"
x[1]
x[1][2]
x[1] <- list("0", "0")
x[1]
x[2]
x[2][1]
x[1] <- c("0" "0")
x[1] <- c("0" ,"0")
str(x[2])
x[2][1]
x[2][2]
x[2]
x[2] <- as.numeric(x[2])
gho3
gho$Age.Group
?level
??level
unlist(x)
x <- strsplit(as.character(gho3$Age.Group), "-")
matrix(unlist(x), ncol=2, byrow=TRUE)
x
x[1]
gho$Age.Group
?replace
gho$Age.Group[1] <- "0-0"
gho$Age.Group
gho$Age.Group[1] <- c("0-0")
gho$Age.Group[1] <- as.factor(c("0-0"))
gho3 <- select(read.csv(url3), Age.Group, Numeric)
gho3$Age.Group
str(gho3$Age.Group)
str(gho3)
gho3$Age.Group <- as.character(gho3$Age.Group)
str(gho3)
gho3[Age.Group=="<1"]
gho3[,Age.Group=="<1"]
gho3$Age.Group
gho3$Age.Group=="<1"
gho$3Age.Group[, gho3$Age.Group == "<1"] <- c("0-0")
gho$3Age.Group[, gho3$Age.Group == "<1"]
gho$3Age.Group[gho3$Age.Group == "<1"]
gho3$Age.Group[, gho3$Age.Group == "<1"] <- c("0-0")
gho3$Age.Group[, gho3$Age.Group == "<1"]
gho3$Age.Group[gho3$Age.Group == "<1"]
gho3$Age.Group[gho3$Age.Group == "<1"] <- c("0-0")
gho3$Age.Group
gho3$Age.Group[gho3$Age.Group == "100+"] <- c("100-999")
gho3$Age.Group
x <- strsplit(as.character(gho3$Age.Group), "-")
x
str(x)
str[1,1]
str[1]
x[1,1]
x[1]
x[1][2]
x[1][1]
str(x[1])
x[,1]
matrix(unlist(x), ncol=2, byrow=TRUE)
unlist(x)
list(x)
str(x)
x[[1]][1]
x[[1]][2]
x[[.]][1]
runExample("01_hello") # a histogram
library(shiny)
runExample("01_hello") # a histogram
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("07_widgets") # help text and submit buttons
runExample("08_html") # shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("10_download") # file download wizard
runExample("11_timer") # an automated timer
url_country <- "http://apps.who.int/gho/athena/data/data-text.csv?target=COUNTRY&profile=text"
df_country <- read.csv(url_country)
df_country
str(df_country)
?read.csv
df_country <- read.csv(url_country, stringsAsFactors = F)
str(df_country)
df_country <- read.csv(url_country, stringsAsFactors = F, col.names = c("type", "abr", "name"))
str(df_country)
df_country <- select(read.csv(url_country, stringsAsFactors = F, col.names = c("type", "abr", "name")), abr, name)
df_country
df_country <- complete.cases(select(read.csv(url_country, stringsAsFactors = F,
col.names = c("type", "abr", "name")), abr, name))
df_country
?complete.cases
ev_url <- "http://apps.who.int/gho/athena/api/GHO/LIFE_0000000035.csv?profile=test&filter=YEAR:2012"
ev_df <- read.csv(ev_url, stringsAsFactors = F)
country_url <- "http://apps.who.int/gho/athena/data/data-text.csv?target=COUNTRY&profile=text"
country_df <- select(read.csv(country_url, stringsAsFactors = F, na.strings = "",
col.names = c("type", "abr", "name")), abr, name)
country_df
ev_url <- paste("http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/LIFE_0000000035",
"&profile=text&filter=REGION:AFR;COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE", sep = "")
ev_df <- read.csv(ev_url, stringsAsFactors = F)
ev_df
ev_url <- paste("http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/LIFE_0000000035",
"&profile=text&filter=REGION:AFR;COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE", sep = "")
ev_df <- select(read.csv(ev_url, stringsAsFactors = F), WHO.region, Age.Group, Sex, Numeric)
ev_df
regions = c("AFR", "EMR", "EUR", "AMR", "SEAR", "WPR")
prefix <- "http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/"
ev <- "LIFE_0000000035"
suffix <- "&profile=text&filter=COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE;REGION:"
ef_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- read.csv(url)
return(data)
}
)
)
ef_df
ef_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- select(read.csv(url, stringsAsFactors = F), WHO.region, Age.Group, Sex, Numeric)
return(data)
}
)
)
ef_df
str(ef_df)
ages <- c("<1", "1-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34",
"35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74",
"75-79", "80-84", "85-89", "90-94", "95-99", "100+")
ev_df$Age.Group <- factor(ev_df$Age.Group, levels=ages)
ev_df <- arrange(ev_df, WHO.Region, Sex, Age.Group)
ev_df <- arrange(ev_df, WHO.region, Sex, Age.Group)
ev_df
ef_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- select(read.csv(url, stringsAsFactors = F), WHO.region, Age.Group, Sex, Numeric)
return(data)
}
)
)
str(ev_df)
regions = c("AFR", "EMR", "EUR", "AMR", "SEAR", "WPR")
prefix <- "http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/"
ev <- "LIFE_0000000035"
suffix <- "&profile=text&filter=COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE;REGION:"
ef_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- select(read.csv(url, stringsAsFactors = F), WHO.region, Age.Group, Sex, Numeric)
return(data)
}
)
)
str(ev_df)
regions = c("AFR", "EMR", "EUR", "AMR", "SEAR", "WPR")
prefix <- "http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/"
ev <- "LIFE_0000000035"
suffix <- "&profile=text&filter=COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE;REGION:"
ef_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- select(read.csv(url, stringsAsFactors = F), WHO.region, Age.Group, Sex, Numeric)
return(data)
}
)
)
regions = c("AFR", "EMR", "EUR", "AMR", "SEAR", "WPR")
prefix <- "http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/"
ev <- "LIFE_0000000035"
suffix <- "&profile=text&filter=COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE;REGION:"
ev_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- select(read.csv(url, stringsAsFactors = F), WHO.region, Age.Group, Sex, Numeric)
return(data)
}
)
)
ages <- c("<1", "1-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34",
"35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74",
"75-79", "80-84", "85-89", "90-94", "95-99", "100+")
ev_df$Age.Group <- factor(ev_df$Age.Group, levels=ages)
ev_df <- arrange(ev_df, WHO.region, Sex, Age.Group)
str(ev_df)
ev_df
regions = c("AFR", "EMR", "EUR", "AMR", "SEAR", "WPR")
prefix <- "http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/"
ev <- "LIFE_0000000035"
suffix <- "&profile=text&filter=COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE;REGION:"
ev_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- select(read.csv(url, stringsAsFactors = F), WHO.region, Sex, Age.Group, Numeric)
return(data)
}
)
)
ages <- c("<1", "1-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34",
"35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74",
"75-79", "80-84", "85-89", "90-94", "95-99", "100+")
ev_df$Age.Group <- factor(ev_df$Age.Group, levels=ages)
ev_df <- arrange(ev_df, WHO.region, Sex, Age.Group)
ev_df
str(ev_df)
ev_df
regions = c("AFR", "EMR", "EUR", "AMR", "SEAR", "WPR")
prefix <- "http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/"
ev <- "LIFE_0000000035"
suffix <- "&profile=text&filter=COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE;REGION:"
ev_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- select(read.csv(url, stringsAsFactors = F), WHO.region, Sex, Age.Group, Numeric)
return(data)
}
)
)
ev_df
str(ev_df)
head(ev_df)
ev_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- read.csv(url)
return(data)
}
)
)
str(ev_df)
ev_df <- select(ev_df, WHO.region, Sex, Age.Group, Numeric)
ev_df
ev_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- read.csv(url)
return(data)
}
)
)
str(ev_df)
?distinct
ev_df <- distinct(ev_df)
ev_df
ev_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- distinct(select(read.csv(url), WHO.region, Sex, Age.Group, Numeric))
return(data)
}
)
)
str(ev_df)
ev_df <- arrange(ev_df, WHO.region, Sex, Age.Group)
ev_df
ages <- c("<1", "1-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34",
"35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74",
"75-79", "80-84", "85-89", "90-94", "95-99", "100+")
ev_df$Age.Group <- factor(ev_df$Age.Group, levels=ages)
ev_df <- arrange(ev_df, WHO.region, Sex, Age.Group)
ev_df
?do.call
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
runExample("09_upload"
)
ev_df
saveRDS(ev_df, "ev.rds")
source("ev.R")
source("./ddp/ev.R")
??distinct
source("./ddp/ev.R")
source("./ddp/ev.R")
source("./ddp/ev.R")
?saveRDS
source("./ddp/ev.R")
?saveRDS
source("./ddp/ev.R")
source("./ddp/ev.R")
source("./ddp/ev.R")
source("./ddp/ev.R")
runApp("ddp")
library(shiny)
runApp("ddp")
runApp("ddp")
runApp("ddp")
library(dplyr)
regions = c("AFR", "EMR", "EUR", "AMR", "SEAR", "WPR")
prefix <- "http://apps.who.int/gho/athena/data/data-text.csv?target=GHO/"
ev <- "LIFE_0000000035"
suffix <- "&profile=text&filter=COUNTRY:-;YEAR:2012;SEX:FMLE;SEX:MLE;REGION:"
ev_df <- do.call(rbind, lapply(regions,
function(region) {
url <- paste(prefix, ev, suffix, region, sep="")
data <- distinct(select(read.csv(url), WHO.region, Sex, Age.Group, Numeric))
return(data)
}
)
)
ages <- c("<1", "1-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34",
"35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74",
"75-79", "80-84", "85-89", "90-94", "95-99", "100+")
ev_df$Age.Group <- factor(ev_df$Age.Group, levels=ages)
ev_df <- arrange(ev_df, WHO.region, Sex, Age.Group)
distinct(ev_df$Age.Group)
library(dplyr)
distinct(ev_df$Age.Group)
distinct(as.character(ev_df$Age.Group))
distinct(as.char(ev_df$Age.Group))
ev_df$Age.Group
unique(ev_df$Age.Group)
runApp("ddp")
runApp("ddp")
unique(ev_df$region)
str(ev_df)
unique(WHO.region)
unique(ev_df$WHO.region)
runApp("ddp")
runApp("ddp")
runApp("ddp")
ev_df
str(ev_df)
ev_df[WHO.region == "Americas", Sex = "Male", Age = "60-64"]$Numeric
ev_df[WHO.region == "Americas" & Sex == "Male" & Age == "60-64"]$Numeric
ev_df[WHO.Region == "Americas" & Sex == "Male" & Age == "60-64"]$Numeric
ev_df[WHO.region == "Americas" & Sex == "Male" & Age == "60-64"]$Numeric
ev_df[WHO.region == "Americas"]
ev_df[, WHO.region == "Americas" & Sex == "Male" & Age == "60-64"]$Numeric
ev_df[, WHO.region == "Americas" && Sex == "Male" && Age == "60-64"]$Numeric
ev_df[WHO.region == "Americas" && Sex == "Male" && Age == "60-64"]$Numeric
ev_df[WHO.region == "Europe"]
ev_df[ev_df$WHO.region == "Americas" & ev_df$Sex == "Male" & ev_df$Age == "60-64"]$Numeric
ev_df[ev_df$WHO.region == "Americas" && ev_df$Sex == "Male" && ev_df$Age == "60-64"]$Numeric
ev_df[ev_df$WHO.region == "Americas" && ev_df$Sex == "Male" && ev_df$Age.Group == "60-64"]$Numeric
ev_df[ev_df$WHO.region == "Americas"]$Numeric
ev_df[ev_df[WHO.region == "Americas"]]$Numeric
ev_df[ev_df$WHO.region == "Americas"]
ev_df[ev_df$WHO.region = "Americas"]
ev_df[ev_df$WHO.region == "Americas"]
ev_df[ev_df$WHO.region == "Americas",]
ev_df[ev_df$WHO.region == "Americas" && ev_df$Sex == "Male" && ev_df$Age == "60-64", ]$Numeric
ev_df[ev_df$WHO.region == "Americas" && ev_df$Sex == "Male" && ev_df$Age.Group == "60-64", ]$Numeric
ev_df[ev_df$WHO.region == "Americas" & ev_df$Sex == "Male" & ev_df$Age.Group == "60-64", ]$Numeric
runApp("ddp")
runApp("ddp")
runApp("ddp")
runApp("ddp")
runApp("ddp")
ev_df[ev_df$WHO.region == "Americas" & ev_df$Sex == "Male" & ev_df$Age.Group == "60-64", ]$Numeric
runApp("ddp")
runApp("ddp")
runApp("ddp")
runApp("ddp")
runApp("ddp")
runApp("ddp")
?renderText
runApp("ddp")
runApp("ddp")
library(shinyapps)
shinyapps::deployApp(./ddp)
shinyapps::deployApp("./ddp")
source("./life_expectancy/ev.R")
source("./ddp_project/ev.R")
shinyapps::deployApp("./ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
runApp("ddp_project")
library(slidify)
author("ddp_presentation")
getwd()
setwd("../")
getwd()
author("test_deck")
setwd(../)
getwd()
setwd(../)
setwd(./)
source("ev.R")
setwd(../)
setwd("../")
source("ev.R")
getwd()
setwd("../ddp_project")
setwd("C:/Users/David/Documents/GitHub/ddp_project/)
)
""
setwd("C:/Users/David/Documents/GitHub/ddp_project/")
source("ev.R")
setwd("../")
readRDS(ev_df, file = "./ddp_project/data/ev.rds")
str(ev_df)
library(rCharts)
plt1 <- nPlot(Age.Group ~ Numeric, group = WHO.region, type = "multiBarChart", )
plt1 <- nPlot(Age.Group ~ Numeric, group = WHO.region, type = "multiBarChart",
data = subset(ev_df, Sex = "Male")
)
plt1 <- nPlot(Age.Group ~ Numeric, type = "multiBarChart",
data = subset(ev_df, Sex = "Male"))
plt1
plot(Age.Group ~ Numeric, data=(ev_df))
plot(Numeric ~ Age.Group, data=(ev_df))
plot(Numeric ~ Age.Group, by = WHO.region, data=(ev_df))
?nplot
?nPlot
??nPlot
install_github("ramnathv/rCharts")
library(devtools)
install_github("ramnathv/rCharts")
library(rCharts)
rPlot(Numeric ~ Age.Group, data=(ev_df))
rPlot(Numeric ~ Age.Group, data=ev_df)
rPlot(Numeric ~ Age.Group, data=ev_df, type = "bar")
p1 <- rPlot(Numeric ~ Age.Group, data=ev_df)
p1$print
p1 <- rPlot(Numeric ~ Age.Group, data=ev_df, type = "bar")
p1$print
str(ev_df)
?rPlot
rPlot(Numeric ~ Age.Group, data=ev_df, type = "point")
rPlot(Numeric ~ Age.Group, data = ev_df)
p1$print("chart1")
getwd()
library("shiny")
runApp("developing_data_products")
author("test")
library(shiny)
author("test")
install.packages(c("Formula", "googleVis", "knitr", "timeDate", "timeSeries", "UsingR"))
runApp("developing_data_products")
runApp("ddp_project")
library(devtools)
devtools::install_github('rstudio/shiny')
library(shiny)
runApp("ddp_project")
library(shiny)
runApp("ddpp")
runApp("ddpp")
runApp("ddpp")
runApp("ddp_project")
install.packages("shiny")
library(shiny)
runApp("ddp_project")
runApp("ddp_project")
library(shiny)
getwd()
runApp("ddp_project")
library(slidify)
getwd()
setwd("./ddp_presentation")
getwd()
sldify("input.Rmd")
slidify("input.Rmd")
slidify("index.Rmd")
source("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
